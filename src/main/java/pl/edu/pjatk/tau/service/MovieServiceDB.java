package pl.edu.pjatk.tau.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.springframework.stereotype.Service;
import pl.edu.pjatk.tau.domain.Movie;

@Service
public class MovieServiceDB {

    private static Integer counterID = 0;
    private static List<Movie> db = new ArrayList<>();

    private Connection connection;

    private PreparedStatement createMovieStmt;

    private PreparedStatement readAllMoviesStmt;

    private PreparedStatement readMovieStmt;

    private PreparedStatement updateMovieStmt;

    private PreparedStatement deleteMovieStmt;

    private PreparedStatement deleteAllMoviesStmt;

    public Integer createMovie(Movie newMovie) throws SQLException {

        createMovieStmt.setString(1, newMovie.getName());
        createMovieStmt.setString(2, newMovie.getType());
        createMovieStmt.setString(3, newMovie.getDirector());

        counterID = createMovieStmt.executeUpdate();
        ResultSet generatedKeys = createMovieStmt.getGeneratedKeys();
        if (generatedKeys.next()) {
            newMovie.setId((int) generatedKeys.getLong(1));
        }
        return counterID;
    }

    public List<Movie> readAll() throws SQLException {
        List<Movie> movies = new LinkedList<>();

        ResultSet rs = readAllMoviesStmt.executeQuery();

        while (rs.next()) {
            Movie m = new Movie();
            m.setId(rs.getInt("id"));
            m.setName(rs.getString("name"));
            m.setType(rs.getString("type"));
            m.setDirector(rs.getString("director"));
            movies.add(m);
        }

        return movies;
    }

    public Movie readMovieById(Integer id) throws SQLException {
        try {
            readMovieStmt.setInt(1, id);
            ResultSet rs = readMovieStmt.executeQuery();

            if (rs.next()) {
                Movie m = new Movie();
                m.setId(rs.getInt("id"));
                m.setName(rs.getString("name"));
                m.setType(rs.getString("type"));
                m.setDirector(rs.getString("director"));
                return m;
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        throw new SQLException("Movie with id " + id + " does not exist");
    }

    public Integer updateMovie(Integer id, Movie updatedMovie ) throws SQLException {

        int count = 0;
        try {
            updateMovieStmt.setString(1, updatedMovie.getName());
            updateMovieStmt.setString(2, updatedMovie.getType());
            updateMovieStmt.setString(3, updatedMovie.getDirector());
            updateMovieStmt.setInt( 4,id);
            count = updateMovieStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        if (count <= 0) {
            throw new java.sql.SQLException("Movie not found");
        }

        return count;

    }

    public int deleteMovie(Integer id) {

        try {
            deleteMovieStmt.setInt(1, id);
            return deleteMovieStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }

    }

    public int deleteAllMovies() {
        try {
            return deleteAllMoviesStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }

    public MovieServiceDB() throws SQLException {
        this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
        if (!isDatabaseReady()) {
            createTables();
        }
        this.setConnection(this.connection);
    }

    public void createTables() throws SQLException {
        connection.createStatement()
                .executeUpdate("CREATE TABLE Movie (id bigint GENERATED BY DEFAULT AS IDENTITY, "
                        + "name varchar(20) NOT NULL, type varchar(20) NOT NULL, "
                        + "director varchar(20) NOT NULL)");
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Movie".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        createMovieStmt = connection.prepareStatement(
                "INSERT INTO Movie (name, type,director) VALUES (?, ?, ?)",
                Statement.RETURN_GENERATED_KEYS);
        deleteMovieStmt = connection.prepareStatement("DELETE FROM Movie WHERE id = ?");
        deleteAllMoviesStmt = connection.prepareStatement("DELETE FROM Movie");
        readAllMoviesStmt = connection
                .prepareStatement("SELECT id, name, type,director  FROM Movie ORDER BY id");
        readMovieStmt = connection
                .prepareStatement("SELECT id, name, type,director  FROM Movie WHERE id = ?");
        updateMovieStmt = connection
                .prepareStatement("UPDATE Movie SET name=?, type=?,director=? WHERE id = ?");
    }


}